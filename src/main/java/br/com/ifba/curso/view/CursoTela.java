/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

import br.com.ifba.curso.controller.CursoController;
import br.com.ifba.curso.controller.CursoIController;
import br.com.ifba.curso.entity.Curso;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luis2
 */
public class CursoTela extends javax.swing.JFrame {

    /**
     * Creates new form CursoTela
     */
    
    //Linha responsavel por implementar o controller via camada Controller ao inves de entitymanager
    private final CursoIController cursoController = new CursoController();

    
    public CursoTela() {
        initComponents();
        carregarCursosNaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPesquisar = new javax.swing.JTextField();
        jspContainerCurso = new javax.swing.JScrollPane();
        jtbCurso = new javax.swing.JTable();
        btnAdicionarCurso = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtPesquisar.setText("Pesquisar");

        jtbCurso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Curso", "Carga Horária", "Código do Curso", "Ativo", "Vagas", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jspContainerCurso.setViewportView(jtbCurso);

        btnAdicionarCurso.setText("Adicionar");
        btnAdicionarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarCursoActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jspContainerCurso, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnAdicionarCurso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jspContainerCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdicionarCurso)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditar)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemover)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarCursoActionPerformed
    JTextField campoNome = new JTextField();
    JTextField campoCodigo = new JTextField();
    JTextField campoCargaHoraria = new JTextField();
    JTextField campoVagas = new JTextField();
    JCheckBox checkAtivo = new JCheckBox("Ativo", true);

    Object[] campos = {
        "Nome do Curso:", campoNome, "Código do Curso:", campoCodigo,
        "Carga Horária:", campoCargaHoraria, "Vagas:", campoVagas,
        "Situação:", checkAtivo
    };

    int opcao = JOptionPane.showConfirmDialog(this, campos, "Adicionar Novo Curso", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (opcao == JOptionPane.OK_OPTION) {
        String nome = campoNome.getText();
        String codigo = campoCodigo.getText();
        String cargaStr = campoCargaHoraria.getText();
        String vagasStr = campoVagas.getText();
        boolean ativo = checkAtivo.isSelected();
        
        if (nome.trim().isEmpty() || codigo.trim().isEmpty() || cargaStr.trim().isEmpty() || vagasStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos os campos devem ser preenchidos.", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int cargaHoraria = Integer.parseInt(cargaStr);
            int vagas = Integer.parseInt(vagasStr);
            
            Curso curso = new Curso();
            curso.setNome(nome);
            curso.setCodigo(codigo);
            curso.setCargaHoraria(cargaHoraria);
            curso.setVagas(vagas);
            curso.setAtivo(ativo);

            // A chamada ao DAO foi substituída pela chamada ao Controller.
            this.cursoController.saveCurso(curso);

            JOptionPane.showMessageDialog(this, "Curso salvo com sucesso!");
            carregarCursosNaTabela();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Os campos 'Carga Horária' e 'Vagas' devem ser números válidos.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar o curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnAdicionarCursoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
    String idStr = JOptionPane.showInputDialog(this, "Informe o ID do curso a ser editado:");
    if (idStr == null || idStr.trim().isEmpty()) return;

    try {
        Long idCurso = Long.parseLong(idStr.trim());

        // Busca o curso através do Controller, não mais do DAO.
        Curso curso = this.cursoController.findCursoById(idCurso);

        if (curso == null) {
            JOptionPane.showMessageDialog(this, "Curso com ID '" + idCurso + "' não encontrado.");
            return;
        }

        JTextField campoNome = new JTextField(curso.getNome());
        JTextField campoCodigo = new JTextField(curso.getCodigo());
        JTextField campoCargaHoraria = new JTextField(String.valueOf(curso.getCargaHoraria()));
        JTextField campoVagas = new JTextField(String.valueOf(curso.getVagas()));
        JCheckBox checkAtivo = new JCheckBox("Ativo", curso.isAtivo());

        Object[] campos = {
            "Nome:", campoNome, "Código do Curso:", campoCodigo,
            "Carga Horária:", campoCargaHoraria, "Vagas:", campoVagas,
            "Situação:", checkAtivo
        };

        int opcao = JOptionPane.showConfirmDialog(this, campos, "Editar Curso ID " + idCurso, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (opcao == JOptionPane.OK_OPTION) {
            curso.setNome(campoNome.getText());
            curso.setCodigo(campoCodigo.getText());
            curso.setCargaHoraria(Integer.parseInt(campoCargaHoraria.getText()));
            curso.setVagas(Integer.parseInt(campoVagas.getText()));
            curso.setAtivo(checkAtivo.isSelected());

            // Atualiza o curso através do Controller.
            this.cursoController.updateCurso(curso);

            JOptionPane.showMessageDialog(this, "Curso atualizado com sucesso!");
            carregarCursosNaTabela();
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID inválido! Informe um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao editar curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed

    String idStr = JOptionPane.showInputDialog(this, "Informe o ID do curso a ser removido:");
    if (idStr == null || idStr.trim().isEmpty()) return;

    try {
        Long idCurso = Long.parseLong(idStr.trim());
        int confirmacao = JOptionPane.showConfirmDialog(this, 
            "Tem certeza que deseja remover o curso com ID " + idCurso + "?", 
            "Confirmação", 
            JOptionPane.YES_NO_OPTION);

        if (confirmacao == JOptionPane.YES_OPTION) {
            // Busca o curso pelo Controller para depois deletar.
            Curso curso = this.cursoController.findCursoById(idCurso);

            if (curso != null) {
                // Deleta o curso através do Controller.
                this.cursoController.deleteCurso(curso);
                JOptionPane.showMessageDialog(this, "Curso removido com sucesso!");
                carregarCursosNaTabela();
            } else {
                JOptionPane.showMessageDialog(this, "Curso com ID '" + idCurso + "' não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

    }
    catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID inválido! Informe um número válido.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao remover curso: " + e.getMessage(), "Erro de Persistência", JOptionPane.ERROR_MESSAGE);
        
    }    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
    String nomeBusca = txtPesquisar.getText().trim();
    if (nomeBusca.isEmpty() || nomeBusca.equalsIgnoreCase("Pesquisar...") || nomeBusca.equalsIgnoreCase("Pesquisar por nome...")) {
        carregarCursosNaTabela();
        return;
    }

    try {
        List<Curso> cursos = this.cursoController.findByName(nomeBusca);
        
        DefaultTableModel model = (DefaultTableModel) jtbCurso.getModel();
        model.setRowCount(0);

        // Ordem dos dados corrigida também aqui
        for (Curso curso : cursos) {
            model.addRow(new Object[]{
                curso.getNome(),
                curso.getCargaHoraria(),
                curso.getCodigo(),
                curso.isAtivo() ? "Ativo" : "Inativo",
                curso.getVagas(),
                curso.getId()
            });
        }

        if (cursos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum curso encontrado para: " + nomeBusca);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao buscar cursos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create jspContainerCursothe form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CursoTela().setVisible(true);
            }
        });
    }
    
// Substitua o método inteiro em CursoTela.java
    private void carregarCursosNaTabela() {
        try {
            List<Curso> cursos = this.cursoController.getAllCursos();

            DefaultTableModel model = (DefaultTableModel) jtbCurso.getModel();
            model.setRowCount(0);

            // Ordem dos dados corrigida para corresponder às colunas da sua tabela
            for (Curso curso : cursos) {
                model.addRow(new Object[]{
                    curso.getNome(),
                    curso.getCargaHoraria(),
                    curso.getCodigo(),
                    curso.isAtivo() ? "Ativo" : "Inativo",
                    curso.getVagas(),
                    curso.getId()
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar cursos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarCurso;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JScrollPane jspContainerCurso;
    private javax.swing.JTable jtbCurso;
    private javax.swing.JTextField txtPesquisar;
    // End of variables declaration//GEN-END:variables
}
